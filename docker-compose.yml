version: '3.8'

services:
  kafka:
    image: apache/kafka:4.0.0
    container_name: kafka
    networks:
      - pipeline_net
    hostname: kafka
    ports:
      - "9092:9092"
    volumes:
      - kafka-data:/var/lib/kafka/data
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: INTERNAL://kafka:29092,CONTROLLER://kafka:29093, EXTERNAL://localhost:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: EXTERNAL
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:29093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3

  kafka-init:
    image: apache/kafka:4.0.0
    depends_on:
      - kafka
    entrypoint: [ "/bin/sh", "-c" ]
    command: |
      "
      echo 'Waiting for Kafka to be ready...';
      RETRIES=10;
      until /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:29092 --list || [ $RETRIES -eq 0 ]; do
        echo 'Kafka not ready, retrying...';
        sleep 5;
        RETRIES=$((RETRIES - 1));
      done;
      if [ $RETRIES -eq 0 ]; then
        echo 'Kafka did not become ready in time.' >&2;
        exit 1;
      fi;
      echo 'Kafka is ready. Creating topic...';
      /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:29092 --create --if-not-exists --topic taxi_gps_stream --replication-factor 1 --partitions 3;
      "
    networks:
      - pipeline_net

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    networks:
      - pipeline_net
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=kraft
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
    depends_on:
      - kafka

  #metabase:
  #  image: metabase/metabase:latest
  #  container_name: metabase
  #  networks:
  #    - pipeline_net
  #  ports:
  #    - "3000:3000"
  #  volumes:
  #    - metabase-data:/metabase-data

  #prometheus:
  #  image: prom/prometheus:latest
  #  container_name: prometheus
  #  networks:
  #    - pipeline_net
  #  ports:
  #    - "9090:9090"
  #  volumes:
  #    - ./monitoring/pormetheus/:/etc/prometheus/
  #    - prometheus-data:/prometheus

  #grafana:
  #  image: grafana/grafana:latest
  #  container_name: grafana
  #  networks:
  #    - pipeline_net
  #  ports:
  #    - "3001:3000"
  #  volumes:
  #    - grafana-data:/var/lib/grafana

  
  zookeeper:
    image: zookeeper:3.9.2
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - pipeline_net
   
  pinot-controller:
    image: apachepinot/pinot:1.2.0
    command: "StartController -zkAddress zookeeper:2181"
    container_name: "pinot-controller"
    hostname: pinot-controller
    volumes:
      - ./scripts:/scripts
    restart: unless-stopped
    ports:
      - "9000:9000"
    environment:
      JAVA_OPTS: "-Dplugins.dir=/opt/pinot/plugins -Xms1G -Xmx4G -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -Xloggc:gc-pinot-controller.log"
    depends_on:
      - zookeeper
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:9000/health || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - pipeline_net

  pinot-broker:
    image: apachepinot/pinot:1.2.0
    command: "StartBroker -zkAddress zookeeper:2181"
    restart: unless-stopped
    container_name: "pinot-broker"
    hostname: pinot-broker
    ports:
      - "8099:8099"
    environment:
      JAVA_OPTS: "-Dplugins.dir=/opt/pinot/plugins -Xms4G -Xmx4G -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -Xloggc:gc-pinot-broker.log"
    depends_on:
      pinot-controller:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8099/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - pipeline_net

  pinot-server:
    image: apachepinot/pinot:1.2.0
    command: "StartServer -zkAddress zookeeper:2181"
    restart: unless-stopped
    container_name: "pinot-server"
    hostname: pinot-server
    ports:
      - "8098:8098"
      - "9015:9015"
    environment:
      JAVA_OPTS: "-Dplugins.dir=/opt/pinot/plugins -Xms4G -Xmx16G -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -Xloggc:gc-pinot-server.log"
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8097/health/readiness || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    depends_on:
      pinot-controller:
        condition: service_healthy
    networks:
      - pipeline_net
  
  pinot-add-table:
    image: apachepinot/pinot:1.2.0
    volumes:
      - ./real-time-etl/src/pinot:/scripts
    command: "'./bin/pinot-admin.sh AddTable -schemaFile /scripts/gps_data_schema.json -tableConfigFile /scripts/gps_data_realtime_table_config.json -controllerHost pinot-controller -exec'"
    container_name: "pinot-add-table"
    restart: on-failure
    entrypoint: "bash -c"
    environment:
      - kafka
    networks:
      - pipeline_net
    depends_on:
      kafka-init:
        condition: service_completed_successfully
      pinot-controller:
        condition: service_healthy
      pinot-broker:
        condition: service_healthy


volumes:
  kafka-data:
  pinot-data:
  metabase-data:
  prometheus-data:
  grafana-data:

networks:
  pipeline_net:
    driver: bridge
